{"version":3,"sources":["components/Tile.styled.js","components/VideoOverview.js","components/CommentsChart.js","components/CommentsList.js","components/VideoHighlights.js","components/QuestionCard.js","components/QuestionCategories.js","components/SentimentAnalysisChart.js","components/SentimentAnalysis.js","components/Dashboard.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Tile","styled","div","StyledVideoOverview","VideoOverview","props","src","details","thumbnail","alt","title","className","viewCount","date","likeCount","commentCount","StyledCommentsChart","CommentsChart","useState","chartData","setChartData","gradientFill","document","createElement","getContext","createLinearGradient","addColorStop","useEffect","labels","timestamps","list","datasets","label","data","count","backgroundColor","borderColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","borderWidth","height","options","scales","xAxes","ticks","beginAtZero","autoSkip","maxTicksLimit","yAxes","responsive","maintainAspectRatio","StyledCommentsList","Comment","CommentsList","map","comment","StyledVideoHighlights","VideoHighlights","comments","StyledQuestionCard","QuestionCard","categoryName","question","StyledQuestonCategories","QuestonCategories","SentimentAnalysisChart","state","stack","sentiment","positive","neutral","negative","this","tooltips","enabled","display","stacked","barPercentage","text","fontSize","legend","position","Component","StyledSentimentAnalysis","SentimentAnalysis","postive","LoadingContainer","DashboardContainer","Dashboard","id","useParams","setData","error","setError","loaded","setLoaded","a","fetch","method","body","URLSearchParams","json","then","fetchData","message","QuestionCategories","type","color","HomeContainer","Home","value","handleChange","bind","handleSubmit","event","setState","target","preventDefault","substring","lastIndexOf","history","push","onSubmit","onChange","React","withRouter","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6b19f9cd.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Tile = styled.div`\n  background: #ffffff;\n  box-shadow: 0px 0px 20px 2px rgba(0, 0, 0, 0.1);\n  border-radius: 15px;\n  height: 310px;\n  width: 300px;\n  flex-grow: 3;\n  margin: 10px;\n`;\n\nexport default Tile;","import React from \"react\";\nimport styled from \"styled-components\";\nimport Tile from \"./Tile.styled\";\nconst StyledVideoOverview = styled(Tile)`\n  height: 300px;\n  max-width: 275px;\n  flex-grow: 1;\n  margin: 10px;\n  padding: 20px;\n  h2 {\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 18px;\n    line-height: 21px;\n    color: #343434;\n  }\n\n  img {\n    width: 100%;\n    border-radius: 5px;\n  }\n  p {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 14px;\n    margin-bottom: 0px;\n    color: black;\n  }\n  .Views {\n    font-family: Roboto;\n    font-style: normal;\n    font-size: 12px;\n    color: grey;\n  }\n  div {\n    margin: 5px;\n    display: flex;\n    flex-direction: row;\n    padding: 5px;\n    justify-content: center;\n    text-align: center;\n\n    .Card {\n      display: inline;\n      width: 79px;\n      height: 40px;\n      margin: 0px 5px;\n      background: #f7f7f7;\n      border-radius: 10px;\n      color: black;\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: normal;\n      font-size: 10px;\n      line-height: 12px;\n    }\n    h4 {\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: bold;\n      font-size: 14px;\n      line-height: 16px;\n      color: #f72537;\n      margin: 0px;\n      margin-top: 5px;\n    }\n  }\n`;\n\nfunction VideoOverview(props) {\n    return (\n      <div>\n        <StyledVideoOverview>\n          <h2>Video Overview</h2>\n          <img\n            src={props.details.thumbnail}\n            alt=\"thumbnail of the video\"\n          ></img>\n          <p>{props.details.title}</p>\n    <span className=\"Views\">{props.details.viewCount} views â€¢ Posted on {props.details.date}</span>\n          <div>\n            <span className=\"Card\">\n    <h4>{props.details.likeCount}</h4>Likes\n            </span>\n            <span className=\"Card\">\n    <h4>{props.details.commentCount}</h4>Comments\n            </span>\n          </div>\n        </StyledVideoOverview>\n      </div>\n    );\n}\n\nexport default VideoOverview;\n","import React, {useState, useEffect} from 'react';\nimport styled from \"styled-components\";\nimport {Line} from 'react-chartjs-2';\nconst StyledCommentsChart = styled.div`\n    width: 100%;\n`;\n\nfunction CommentsChart(props) {\n    const [chartData, setChartData] = useState({});\n    const canvas = document.createElement('canvas');\n    let ctx = canvas.getContext('2d');\n    let gradientFill = ctx.createLinearGradient(0, 400, 0, 0);\n    gradientFill.addColorStop(1, \"rgba(233, 158, 158, 1)\");\n    gradientFill.addColorStop(0, \"rgba(255, 215, 215, 0.31)\");\n    let chart = ()=>{\n        setChartData({\n            labels: props.timestamps.list,\n            datasets: [\n            {\n                label: \"Comments\",\n                data: props.timestamps.count,\n                backgroundColor: gradientFill,\n                borderColor:  [\"rgba(207, 42, 42, 0.79)\"],\n                pointBorderColor: \"rgba(207, 42, 42, 0.79)\",\n                pointBackgroundColor: \"#ffffff\",\n                pointHoverBackgroundColor: \"rgba(207, 42, 42, 0.79)\",\n                pointHoverBorderColor: \"rgba(207, 42, 42, 0.79)#80b6f4\",\n                pointBorderWidth: 5,\n                pointHoverRadius: 6,\n                pointHoverBorderWidth: 1,\n                pointRadius: 2,\n                borderWidth: 2\n            }\n            ]\n        });\n    }\n    useEffect(()=>{\n        chart();\n    },[])\n  return (\n        <StyledCommentsChart>\n            <div>\n                <Line \n                    data={chartData}\n                    height={300}\n                    options= {\n                        {\n                            scales: {\n                                xAxes: [{\n                                    ticks: {\n                                        beginAtZero: true,\n                                        autoSkip: true,\n                                        maxTicksLimit: 20                                    }\n                                }],\n                                yAxes: [{\n                                    ticks: {\n                                        maxTicksLimit:10,\n                                        beginAtZero: true\n                                    }\n                                }]\n                            },\n                            responsive: true,\n                            maintainAspectRatio: false\n                        }\n                    }\n                    />\n            </div>\n        </StyledCommentsChart>\n  );\n}\n\nexport default CommentsChart;\n","import React from 'react';\nimport styled from \"styled-components\";\nconst StyledCommentsList = styled.div`\n  width: 100%;\n  height: 300px;\n  margin-top: 20px;\n  background: #F9F9F9;\n  padding: 20px;\n  overflow-y: scroll;\n  border-radius: 10px;\n`;\nconst Comment = styled.div`\n`;\nfunction CommentsList(props) {\n    return (\n            <StyledCommentsList>\n                <div>\n                  {\n                  props.list.map(comment => ( \n                    <Comment>\n                        <p>{comment}</p>\n                    </Comment>\n                  ))\n                  }\n                </div>\n            </StyledCommentsList>\n    );\n}\n\nexport default CommentsList;\n","import React from 'react';\nimport '../App.css';\nimport styled from \"styled-components\";\nimport CommentsCharts from './CommentsChart'\nimport CommentsList from './CommentsList'\nconst StyledVideoHighlights = styled.div`\n  width: 100%;\n  background: #ffffff;\n  box-shadow: 0px 0px 20px 2px rgba(0, 0, 0, 0.1);\n  border-radius: 15px;\n  margin: 10px;\n  padding: 20px;\n  flex-grow: 4;\n  h2{\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 18px;\n    line-height: 21px;\n    color: #343434;\n  }\n  .content{\n    margin: 1%;\n    max-width: 80%\n  }\n`;\n\nfunction VideoHighlights(props) {\n  return (\n        <StyledVideoHighlights>\n          <section>\n            <h2>Video Highlights</h2>\n            <div className=\"content\">\n              {typeof props.data.timestamps !== 'undefined' && (\n                <CommentsCharts timestamps= {props.data.timestamps}/>\n              )}\n              {typeof props.data.comments !== 'undefined' && (\n                <CommentsList list= {props.data.comments}/>\n              )}\n            </div>\n          </section>\n        </StyledVideoHighlights>\n  );\n}\n\nexport default VideoHighlights;\n","import React from 'react';\nimport '../App.css';\nimport styled from \"styled-components\";\n\nconst StyledQuestionCard = styled.div`\n    width: 300px;\n    max-height: 600px;\n    padding: 10px;\n    border-radius: 20px;\n    .cardHeading{\n        background: rgba(207,42,42,0.79);\n        border-radius: 20px 20px 0 0;\n        padding: 20px;\n        h2{\n            font-size: 18px;\n            color: white;\n            margin: 0px;\n            text-align: center;\n        }\n        p{\n            font-size: 12px;\n            color: white;\n            margin: 0px;\n            text-align: center;\n    \n        }\n    }\n    .cardContent{\n        background: #f9f9f9;\n        border-radius: 0 0 20px 20px;        \n        padding: 20px;\n        p{\n            color: #343434;\n            font-size: 14px;\n        }\n    }\n   \n`;\n\n\n\nfunction QuestionCard(props) {\n    return (\n            <StyledQuestionCard>\n                <div className=\"cardHeading\">\n                    <h2>{props.categoryName}</h2>\n                    <p>{props.count} questions</p>\n                </div>\n                <div className=\"cardContent\">\n                    {\n                  props.list.map(question => ( \n                        <p>{question}</p>\n                  ))\n                    }\n                </div>   \n\n            </StyledQuestionCard>\n    );\n}\n\n    export default QuestionCard;","import React from 'react';\nimport '../App.css';\nimport styled from \"styled-components\";\nimport QuestionCard from './QuestionCard'\nconst StyledQuestonCategories = styled.div`\n    width: 100%;\n    background: #ffffff;\n    box-shadow: 0px 0px 20px 2px rgba(0, 0, 0, 0.1);\n    border-radius: 15px;\n    margin: 10px;\n    padding: 20px;\n    flex-grow: 4;\n    h2{\n        font-family: Roboto;\n        font-style: normal;\n        font-weight: bold;\n        font-size: 18px;\n        line-height: 21px;\n        color: #343434;\n        margin-bottom: 0;\n    }\n    .content{\n        margin: 1%;\n        display:flex;\n        flex-direction: row;\n        max-width: 80%;\n    }\n    .subtitle{\n        color: #C4C4C4;\n        font-size: 14px;\n        margin: 0;\n        padding: 0; \n    }\n    .titleContainer{\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n`;\n\nfunction QuestonCategories(props) {\n  return (\n        <StyledQuestonCategories>\n            <section>\n                <div className=\"titleContainer\">\n                    <div>\n                        <h2>Question Categories</h2>\n                        <p className=\"subtitle\">2 categories, 5 questions</p>\n                    </div>\n                    {/* <div class=\"listToggle\">\n                        list Toggle\n                    </div> */}\n                </div>\n                <div className=\"content\">\n                    <QuestionCard categoryName = \"Video Details\" count = {2} \n                    list = {[\n                        'why does the thumbnail look like something out of a genius interview? ðŸ˜‚',\n                        'why was this video shorted than usual?'\n                        ]}/>\n                    <QuestionCard categoryName = \"Video Content\" count = {3} list = {[\n                        'if you like youtube as a way to just stay busy, why stop? ',\n                        'Why is this kind of honest Q&A so rare in Youtube?',\n                        'I gotta know, why don\\'t you make videos with Cryaotic anymore?'\n                    ]}/>\n                </div>\n            </section>\n        </StyledQuestonCategories>\n  );\n}\n\nexport default QuestonCategories;\n","import React, {Component} from 'react';\nimport {HorizontalBar} from 'react-chartjs-2';\n\nclass SentimentAnalysisChart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            chartData: {\n                // label: '# of Comments',\n                datasets: [\n                    {\n                        label:  'Positive',\n                        stack: '1',\n                        data: [this.props.sentiment.positive],  // *** replace this with data from API ***\n                        backgroundColor: [\n                            // '#F0C0C0',  this is the full color palette if we use 5 categories\n                            // '#F0A8A8',\n                            // '#F09090',\n                            // '#F06060',\n                            '#F03030',\n                        ]\n                    },\n                    {\n                        label: 'Neutral',\n                        stack: '1',\n                        data: [this.props.sentiment.neutral],  // *** replace this with data from API ***\n                        backgroundColor: [\n                            '#F09090',\n                        ]\n                    },\n                    {\n                        label:  'Negative',\n                        stack: '1',\n                        data: [this.props.sentiment.negative],  // *** replace this with data from API ***\n                        backgroundColor: [\n                            '#F0C0C0',\n                        ]\n                    },\n                ]\n            }\n        }\n    }\n\n    render () {\n        return (\n            <div className=\"chart\">\n                <HorizontalBar\n                    data={this.state.chartData}\n                    height={40}\n                    options={{\n                        tooltips: {\n                            enabled: false\n                        },\n                        scales: {\n                            xAxes: [{\n                                display: false,\n                                stacked: true,\n                                barPercentage: 1\n\n                            }],\n                            yAxes: [{\n                                display: false,\n                                stacked: true,\n                                barPercentage: 0.8\n                            }],\n                        }, \n                        maintainAspectRatio: false,\n                        title: {\n                            text: 'Comment Sentiment Analysis',\n                            fontSize: 18,\n                            display: false\n                        },\n                        legend: {\n                            position: 'bottom',\n                            display: false\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SentimentAnalysisChart;\n\n\n\n\n\n\n\n// ______In case we use the image that the python script generates________\n\n// const SentimentAnalysis = () => {\n\n//     return(\n//         <div className=\"Card\">\n//             <h2>Comments Analysis</h2>\n//             <img \n//                 src={require('../images/sent_analysis.png')}\n//                 alt=\"sentiment analysis plot\"/>\n//         </div>\n//     )\n// }\n\n// export default SentimentAnalysis;","import React from 'react';\nimport '../App.css';\nimport styled from \"styled-components\";\nimport SentimentAnalysisChart from './SentimentAnalysisChart';\n\n\nconst StyledSentimentAnalysis = styled.div`\n    max-width: 100%;\n    height: 300px;\n    background: #ffffff;\n    box-shadow: 0px 0px 20px 2px rgba(0, 0, 0, 0.1);\n    border-radius: 15px;\n    margin: 10px;\n    padding: 20px;\n    flex-grow: 1;\n    h2{\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 18px;\n    line-height: 21px;\n    color: #343434;\n    margin-bottom: 0;\n    }\n    .content{\n    margin: 5%;\n    max-width: 80%\n    }\n    .help{  \n        background: #F9F9F9;\n        padding: 10px;\n        border-radius: 10px;\n        color: #6C6C6C;\n    }\n    .legends{\n        display: flex;\n        flex-direction: row;\n        justify-content: space-around; \n    }\n    .legend-positive{\n        margin: 5px;\n        width: 20px;\n        height: 20px;\n        border-radius: 5px;\n        background: #F03030;\n    }\n    .legend-neutral{\n        margin: 5px;\n        width: 20px;\n        height: 20px;\n        border-radius: 5px;\n        background: #F09090;\n    }\n    .legend-negative{\n        margin: 5px;\n        width: 20px;\n        height: 20px;\n        border-radius: 5px;\n        background: #F0C0C0;\n    }\n    .legend-container{\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n`;\n\nfunction SentimentAnalysis(props) {\n  return (\n        <StyledSentimentAnalysis>\n            <section>\n                <h2>Viewer Sentiment Analysis</h2>\n                <div className=\"content\">\n                {typeof props.sentiment !== 'undefined' && (\n                    <SentimentAnalysisChart sentiment = {props.sentiment}/>\n                )}\n                    <div className=\"legends\">                        \n                        <div className=\"legend-container\">\n                            <div className=\"legend-positive\"></div>\n                            <p><strong>{props.sentiment.positive}%</strong> positive</p>\n                        </div>\n                        <div className=\"legend-container\">\n                            <div className=\"legend-neutral\"></div>\n                            <p><strong>{props.sentiment.neutral}%</strong> neutral</p>\n                        </div>\n                        <div className=\"legend-container\">\n                            <div className=\"legend-negative\"></div>\n                            <p><strong>{props.sentiment.negative}%</strong> negative</p>\n                        </div>\n                    </div>\n                    <p className=\"help\">Based on likes, dislikes, and comments, viewers found your video \n                        <strong>\n                            {props.sentiment.neutral > props.sentiment.positive + props.sentiment.negative ? \n                            ' mostly neutral. ' \n                            : \n                            (props.sentiment.postive > props.sentiment.negative ? ' mostly positive.' : ' mostly negative.')}\n                        </strong>\n                    </p>\n                </div>\n            </section>\n        </StyledSentimentAnalysis>\n  );\n}\n\nexport default SentimentAnalysis;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport VideoOverview from \"./VideoOverview\";\nimport VideoHighlights from \"./VideoHighlights\";\nimport QuestionCategories from \"./QuestionCategories\";\nimport SentimentAnalysis from \"./SentimentAnalysis\";\nimport { useParams } from \"react-router-dom\";\nimport ReactLoading from \"react-loading\";\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\nconst DashboardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  margin: 20px;\n`;\nfunction Dashboard() {\n  let { id } = useParams();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      const url = \"/api/init/\";\n      const res = await fetch(url, {\n        method: \"PUT\",\n        body: new URLSearchParams({ id: id }),\n      });\n      res.json().then(\n        (data) => {\n          setLoaded(true);\n          setData(data);\n        },\n        (error) => {\n          setLoaded(true);\n          setError(error);\n        }\n      );\n    }\n    fetchData();\n  }, [id]);\n  if (error) {\n    return <div>Something went wrong! {error.message}</div>;\n  } else if (!loaded || !data) {\n    return (\n      <LoadingContainer>\n        <ReactLoading type={\"bars\"} color={\"red\"} />\n      </LoadingContainer>\n    );\n  } else {\n    return (\n      <DashboardContainer>\n        {typeof data.details !== \"undefined\" && (\n          <VideoOverview details={data.details} />\n        )}\n        {typeof data.sentiment !== \"undefined\" && (\n          <SentimentAnalysis sentiment={data.sentiment} />\n        )}\n        {data !== {} && typeof data !== \"undefined\" && (\n          <VideoHighlights data={data} />\n        )}\n        <QuestionCategories />\n      </DashboardContainer>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { withRouter } from 'react-router-dom';\n\nconst HomeContainer = styled.div`\n  h1 {\n    height: 88px;\n    font-family: Passion One;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 80px;\n    margin: 0px;\n    margin-top: 15%;\n    line-height: 88px;\n    /* identical to box height */\n    text-align: center;\n    color: #cf2a2a;\n  }\n  p {\n    font-family: Roboto;\n    font-style: normal;\n    width: 600px;\n    margin-top: 5px;\n    font-weight: normal;\n    font-size: 16px;\n    margin-left: auto;\n    margin-right: auto;\n    line-height: 19px;\n    text-align: center;\n    color: #6c6c6c;\n  }\n  form {\n    text-align: center;\n  }\n  input[type=\"text\"] {\n    background: #ffffff;\n    border: 1px solid #c4c4c4;\n    box-sizing: border-box;\n    border-radius: 10px;\n    width: 555px;\n    height: 45px;\n    left: 357px;\n    top: 532px;\n    padding: 20px;\n  }\n  input[type=\"submit\"] {\n    width: 145px;\n    margin-left: 2px;\n    height: 45px;\n    background: #343434;\n    border-radius: 10px;\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 18px;\n    line-height: 21px;\n    /* identical to box height */\n    text-align: center;\n    color: #ffffff;\n  }\n`;\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const id = this.state.value;\n    const data = id.substring(id.lastIndexOf(\"=\") + 1);\n    this.props.history.push('/dashboard/' + data);\n  }\n\n  render() {\n    return (\n      <HomeContainer>\n        <h1>Commpiled</h1>\n        <p>\n          Great comments = Great Content and we are here to ensure that.\n        </p>\n        <form onSubmit = {this.handleSubmit}>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </HomeContainer>\n    );\n  }\n}\n\nexport default withRouter(Home);\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Dashboard from './components/Dashboard';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\"><Home/></Route>\n        <Route exact path=\"/dashboard/:id\"><Dashboard/></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}